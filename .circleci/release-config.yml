# Copyright 2023 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

parameters:
  GHA_Action:
    type: string
    default: ""
  GHA_Actor:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""

executors:
  linux_x64_executor: # declares a reusable executor
    docker:
      - image: secretflow/release-ci:20240206
    resource_class: 2xlarge+
    shell: /bin/bash --login -eo pipefail
  linux_aarch64_executor:
    docker:
      - image: secretflow/release-ci-aarch64:20240206
    resource_class: arm.2xlarge
    shell: /bin/bash --login -eo pipefail
  macos_arm64_executor:
    macos:
      xcode: 15.1.0
    resource_class: macos.m1.large.gen1
  macos_x64_executor:
    macos:
      xcode: 15.1.0
    resource_class: macos.x86.medium.gen2

commands:
  pip_publish:
    parameters:
      python_ver:
        type: string
    steps:
      - run:
          name: "build package and publish"
          command: |
            conda create -n build python=<< parameters.python_ver >> -y
            conda activate build

            sh ./build_wheel_entrypoint.sh
            python3 -m pip install twine
            ls dist/*.whl

            python3 -m twine upload -r pypi -u __token__ -p ${PYPI_TWINE_TOKEN} dist/*.whl

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  linux_publish:
    parameters:
      python_ver:
        type: string
      executor:
        type: string
    executor: <<parameters.executor>>
    steps:
      - checkout
      - pip_publish:
          python_ver: << parameters.python_ver >>

  macOS_publish:
    parameters:
      python_ver:
        type: string
      executor:
        type: string
    executor: <<parameters.executor>>
    steps:
      - checkout
      - run:
          name: "Install homebrew dependencies"
          command: |
            brew install bazelisk cmake ninja libomp wget go
      - run:
          name: "Install Miniconda"
          command: |
            MACHINE_TYPE=`arch`
            if [ ${MACHINE_TYPE} == 'arm64' ]; then
              wget https://repo.anaconda.com/miniconda/Miniconda3-py310_24.1.2-0-MacOSX-arm64.sh -O ~/miniconda.sh
            else
              wget https://repo.anaconda.com/miniconda/Miniconda3-py310_24.1.2-0-MacOSX-x86_64.sh -O ~/miniconda.sh
            fi
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init zsh bash
      - pip_publish:
          python_ver: << parameters.python_ver >>

  linux_build_binary:
    parameters:
      executor:
        type: string
    executor: <<parameters.executor>>
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Checkout devtools"
          command: git clone https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: Setup GCS
          command: |
            echo ${gcs_content} > ../gcs.data
            ../devtools/bazel_cache_setup.py --in_file=../gcs.data --out_file=gcs.json --min_download
      - run:
          name: "Build"
          command: |
            bash ./build_package_entrypoint.sh
      - run:
          name: "Copy binary"
          command: |
            MACHINE_TYPE=`arch`
            if [ ${MACHINE_TYPE} == 'x86_64' ]; then
              DIR=/tmp/binary/linux/amd64/
            else
              DIR=/tmp/binary/linux/arm64/
            fi

            mkdir -p ${DIR}
            cp ./sf_serving.tar.gz ${DIR}
            cp ./version.txt ${DIR}
            ls ${DIR}
      - persist_to_workspace:
          root: /tmp/binary/
          paths:
            - linux

  docker_image_publish:
    docker:
      - image: cimg/deploy:2023.06.1
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/binary/
      - run:
          name: Build Docker image
          command: |
            # login docker
            docker login -u secretflow -p ${DOCKER_DEPLOY_TOKEN}

            # login docker - aliyun
            docker login -u ${ALIYUN_DOCKER_USERNAME} -p ${ALIYUN_DOCKER_PASSWORD} secretflow-registry.cn-hangzhou.cr.aliyuncs.com

            ls /tmp/binary/linux/amd64/
            ls /tmp/binary/linux/arm64/

            # Build image
            cd docker
            mkdir -p linux/amd64
            mkdir -p linux/arm64
            cp /tmp/binary/linux/amd64/sf_serving.tar.gz linux/amd64/sf_serving.tar.gz
            cp /tmp/binary/linux/arm64/sf_serving.tar.gz linux/arm64/sf_serving.tar.gz

            ls ./linux/amd64
            ls ./linux/arm64

            TAG=$(grep "version" /tmp/binary/linux/amd64/version.txt | awk -F'"' '{print $2}')
            echo $TAG
            docker buildx create --name serving-image-builder --platform linux/arm64,linux/amd64 --use

            docker buildx build --platform linux/arm64,linux/amd64 -t secretflow/serving-anolis8:$TAG --push .
            docker buildx build --platform linux/arm64,linux/amd64 -t secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/serving-anolis8:$TAG --push .

            if [[ $TAG =~ b[0-9]$ ]]; then
                echo "tag and push latest image."
                docker buildx build --platform linux/arm64,linux/amd64 -t secretflow/serving-anolis8:latest --push .
                docker buildx build --platform linux/arm64,linux/amd64 -t secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/serving-anolis8:latest --push .
            fi

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  publish:
    jobs:
      - linux_publish:
          matrix:
            parameters:
              python_ver: ["3.8", "3.9", "3.10", "3.11"]
              executor: ["linux_x64_executor", "linux_aarch64_executor"]
          # This is mandatory to trigger a pipeline when pushing a tag
          filters:
            tags:
              only: /.*/
      - macOS_publish:
          matrix:
            parameters:
              python_ver: ["3.8", "3.9", "3.10", "3.11"]
              executor: ["macos_arm64_executor", "macos_x64_executor"]
          # This is mandatory to trigger a pipeline when pushing a tag
          filters:
            tags:
              only: /.*/
      - linux_build_binary:
          matrix:
            parameters:
              executor: ["linux_x64_executor", "linux_aarch64_executor"]
          # This is mandatory to trigger a pipeline when pushing a tag
          filters:
            tags:
              only: /.*b[0-9]/
      - docker_image_publish:
          requires:
            - linux_build_binary
          # This is mandatory to trigger a pipeline when pushing a tag
          filters:
            tags:
              only: /.*b[0-9]/
