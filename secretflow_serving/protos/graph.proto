// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

import "secretflow_serving/protos/attr.proto";

package secretflow.serving;

// Supported dispatch type
enum DispatchType {
  // Placeholder for proto3 default value, do not use it.
  UNKNOWN_DP_TYPE = 0;

  // Dispatch all participants.
  DP_ALL = 1;
  // Dispatch any participant.
  DP_ANYONE = 2;
  // Dispatch specified participant.
  DP_SPECIFIED = 3;
  // Dispatch self.
  DP_SELF = 4;

  // For 2-parties, Dispatch peer participant.
  DP_PEER = 12;
}

// The runtime config of the execution.
message RuntimeConfig {
  // The dispatch type of the execution.
  DispatchType dispatch_type = 1;

  // The execution need run in session(stateful)
  // TODO: not support yet.
  bool session_run = 2;

  // if dispatch_type is DP_SPECIFIED, only one party should be true
  bool specific_flag = 3;
}

// The definition of a execution. A execution represents a subgraph within a
// graph that can be scheduled for execution in a specified pattern.
message ExecutionDef {
  // Represents the nodes contained in this execution. Note that
  // these node names should be findable and unique within the node
  // definitions. One node can only exist in one execution and must exist in
  // one.
  repeated string nodes = 1;

  // The runtime config of the execution.
  RuntimeConfig config = 2;
}

// The definition of a node.
message NodeDef {
  // Must be unique among all nodes of the graph.
  string name = 1;

  // The operator name.
  string op = 2;

  // The parent node names of the node. The order of the parent nodes should
  // match the order of the inputs of the node.
  repeated string parents = 3;

  // The attribute values configed in the node. Note that this should include
  // all attrs defined in the corresponding OpDef.
  map<string, op.AttrValue> attr_values = 4;

  // The operator version.
  string op_version = 5;
}

// The view of a node, which could be public to other parties
message NodeView {
  // Must be unique among all nodes of the graph.
  string name = 1;

  // The operator name.
  string op = 2;

  // The parent node names of the node. The order of the parent nodes should
  // match the order of the inputs of the node.
  repeated string parents = 3;

  // The operator version.
  string op_version = 5;
}

// The definition of a Graph. A graph consists of a set of nodes carrying data
// and a set of executions that describes the scheduling of the graph.
message GraphDef {
  // Version of the graph
  string version = 1;

  repeated NodeDef node_list = 2;

  repeated ExecutionDef execution_list = 3;

  HeConfig he_config = 4;

  int32 party_num = 10;
}

// The view of a graph is used to display the structure of the graph, containing
// only structural information and excluding the data components.
message GraphView {
  // Version of the graph
  string version = 1;

  repeated NodeView node_list = 2;

  repeated ExecutionDef execution_list = 3;

  HeInfo he_info = 4;

  int32 party_num = 10;
}

// The config for HE compute.
message HeConfig {
  // Serialized public key bytes
  bytes pk_buf = 1;
  // Serialized secret key bytes
  bytes sk_buf = 2;
  // Encode scale for data
  int64 encode_scale = 3;
}

// The public info for HE compute.
message HeInfo {
  // Serialized public key bytes
  bytes pk_buf = 1;
  // Encode scale for data
  int64 encode_scale = 3;
}
